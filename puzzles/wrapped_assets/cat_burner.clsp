; cat_burner.clsp by yakuhito
;; static puzzle that sends a message when CATs are burned

(mod (
  CAT_MOD_HASH
  BURN_INNER_PUZZZLE_MOD_HASH
  BRIDGING_PUZZLE_HASH
  DESTINATION_CHAIN
  DESTINATION ; token bridge address @ destination
  cat_parent_info
  tail_hash_hash ; (sha256 1 tail_hash)
  cat_amount
  source_chain_token_contract_address
  destination_receiver_address
  my_amount
  my_puzzle_hash
  my_coin_id
)
  (include "condition_codes.clib")
  (include "curry.clib")
  (include "sha256tree.clib")

  (defun-inline main (cat_burn_coin_id)
    (list
      (list ASSERT_MY_COIN_ID my_coin_id)
      (list ASSERT_MY_AMOUNT my_amount)
      (list ASSERT_MY_PUZZLEHASH my_puzzle_hash)
      (list ASSERT_COIN_ANNOUNCEMENT (sha256 cat_burn_coin_id my_coin_id))
      (list CREATE_COIN_ANNOUNCEMENT cat_burn_coin_id)
      (list
        CREATE_COIN
        BRIDGING_PUZZLE_HASH ; static
        my_amount ; allows changing min fee without changing puzzle hash
        (list
          ; ([destination_chain] [destination] . [content])
          DESTINATION_CHAIN
          DESTINATION ; who receives this message
          ; begin message
          source_chain_token_contract_address
          destination_receiver_address
          cat_amount
          ; end message
        )
      )
    )
  )

  (main
    (sha256
      (if (= (strlen cat_parent_info) 32) cat_parent_info (x))
      (curry_hashes_inline CAT_MOD_HASH
        (sha256 1 CAT_MOD_HASH) ; CAT_MOD_HASH
        tail_hash_hash ; TAIL_HASH
        (curry_hashes_inline (curry_hashes_inline BURN_INNER_PUZZZLE_MOD_HASH
            (sha256 1 my_puzzle_hash)
            (sha256 1 source_chain_token_contract_address)
          ) ; 1st curry
          (sha256 1 destination_receiver_address) ; RECEIVER
          (sha256 1 my_amount) ; RECEIVER
        ) ; INNER_PUZZLE
      )
      cat_amount
    ) ; cat coin id
  )
)
