; bridge_sender.clsp by yakuhito
;; used to send messages via the bridge

(mod (
    UPGRADE_PUZZLE_HASH
    SINGLETON_LAUNCHER_PUZZLE_HASH
    SINGLETON_MOD_HASH

    SELF_HASH
    LAST_NONCE
    (sender_parent_info sender_puzzle_hash . sender_amount) ; sender_proof
    sender_singleton_proof ;  (launcher_id . inner_puzzle_hash) or ()
    target ; eth target contract address
    deadline ; timestamp
    message ; anything; will be 
    my_coin_id
    upgrade_package ; () or (upgrade_puzzle . upgrade_solution)
  )

  (include condition_codes.clib)
  (include sha256tree.clib)
  (include curry.clib)

  (defun-inline generate_conditions (sender_coin_id message_hash)
    (list
      (list ASSERT_SECONDS_ABSOLUTE deadline)
      (list ASSERT_MY_COIN_ID my_coin_id)
      (list CREATE_COIN_ANNOUNCEMENT my_coin_id sender_coin_id)
      (list ASSERT_COIN_ANNOUNCEMENT (sha256 sender_coin_id my_coin_id message_hash))
      (list CREATE_COIN
        (curry_hashes_inline SELF_HASH (sha256 1 (+ LAST_NONCE 1)))
        1
      )
    )
  )

  (defun-inline value_b32_or_x (v)
    (if (= (strlen v) 32) v (x))
  )

  (defun-inline verify_sender_singleton_proof ()
    (if (= sender_singleton_proof ())
      1
      ; else
      (= sender_puzzle_hash (curry_hashes_inline SINGLETON_MOD_HASH
        (sha256tree (c SINGLETON_MOD_HASH (c (f sender_singleton_proof) SINGLETON_LAUNCHER_PUZZLE_HASH)))
        (r sender_singleton_proof)
      ))
    )
  )

  (if (= upgrade_package ())
    (if (verify_sender_singleton_proof)
      (generate_conditions
        (sha256
          (value_b32_or_x sender_parent_info)
          (value_b32_or_x sender_puzzle_hash)
          sender_amount
        )
        (sha256tree (list
          (= sender_singleton_proof ()) ; sender_by_puzzlehash
          target
          deadline
          message
        ))
      )
      ; else
      (x)
    )
    ; else    
    (if (= (sha256tree (f upgrade_package)) UPGRADE_PUZZLE_HASH)
      (a (f upgrade_package) (r upgrade_package))
      ; else 
      (x)
    )
  )
  
)
